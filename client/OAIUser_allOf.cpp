/**
 * Open Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_allOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_allOf::OAIUser_allOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_allOf::OAIUser_allOf() {
    this->initializeModel();
}

OAIUser_allOf::~OAIUser_allOf() {}

void OAIUser_allOf::initializeModel() {

    m_account_enabled_isSet = false;
    m_account_enabled_isValid = false;

    m_business_phones_isSet = false;
    m_business_phones_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_fax_number_isSet = false;
    m_fax_number_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_last_password_change_date_time_isSet = false;
    m_last_password_change_date_time_isValid = false;

    m_legal_age_group_classification_isSet = false;
    m_legal_age_group_classification_isValid = false;

    m_mail_isSet = false;
    m_mail_isValid = false;

    m_mail_nickname_isSet = false;
    m_mail_nickname_isValid = false;

    m_mobile_phone_isSet = false;
    m_mobile_phone_isValid = false;

    m_office_location_isSet = false;
    m_office_location_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_preferred_language_isSet = false;
    m_preferred_language_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;

    m_usage_location_isSet = false;
    m_usage_location_isValid = false;

    m_user_principal_name_isSet = false;
    m_user_principal_name_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_about_me_isSet = false;
    m_about_me_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_drive_isSet = false;
    m_drive_isValid = false;

    m_drives_isSet = false;
    m_drives_isValid = false;
}

void OAIUser_allOf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_allOf::fromJsonObject(QJsonObject json) {

    m_account_enabled_isValid = ::OpenAPI::fromJsonValue(account_enabled, json[QString("accountEnabled")]);
    m_account_enabled_isSet = !json[QString("accountEnabled")].isNull() && m_account_enabled_isValid;

    m_business_phones_isValid = ::OpenAPI::fromJsonValue(business_phones, json[QString("businessPhones")]);
    m_business_phones_isSet = !json[QString("businessPhones")].isNull() && m_business_phones_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_fax_number_isValid = ::OpenAPI::fromJsonValue(fax_number, json[QString("faxNumber")]);
    m_fax_number_isSet = !json[QString("faxNumber")].isNull() && m_fax_number_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_last_password_change_date_time_isValid = ::OpenAPI::fromJsonValue(last_password_change_date_time, json[QString("lastPasswordChangeDateTime")]);
    m_last_password_change_date_time_isSet = !json[QString("lastPasswordChangeDateTime")].isNull() && m_last_password_change_date_time_isValid;

    m_legal_age_group_classification_isValid = ::OpenAPI::fromJsonValue(legal_age_group_classification, json[QString("legalAgeGroupClassification")]);
    m_legal_age_group_classification_isSet = !json[QString("legalAgeGroupClassification")].isNull() && m_legal_age_group_classification_isValid;

    m_mail_isValid = ::OpenAPI::fromJsonValue(mail, json[QString("mail")]);
    m_mail_isSet = !json[QString("mail")].isNull() && m_mail_isValid;

    m_mail_nickname_isValid = ::OpenAPI::fromJsonValue(mail_nickname, json[QString("mailNickname")]);
    m_mail_nickname_isSet = !json[QString("mailNickname")].isNull() && m_mail_nickname_isValid;

    m_mobile_phone_isValid = ::OpenAPI::fromJsonValue(mobile_phone, json[QString("mobilePhone")]);
    m_mobile_phone_isSet = !json[QString("mobilePhone")].isNull() && m_mobile_phone_isValid;

    m_office_location_isValid = ::OpenAPI::fromJsonValue(office_location, json[QString("officeLocation")]);
    m_office_location_isSet = !json[QString("officeLocation")].isNull() && m_office_location_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_preferred_language_isValid = ::OpenAPI::fromJsonValue(preferred_language, json[QString("preferredLanguage")]);
    m_preferred_language_isSet = !json[QString("preferredLanguage")].isNull() && m_preferred_language_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(street_address, json[QString("streetAddress")]);
    m_street_address_isSet = !json[QString("streetAddress")].isNull() && m_street_address_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;

    m_usage_location_isValid = ::OpenAPI::fromJsonValue(usage_location, json[QString("usageLocation")]);
    m_usage_location_isSet = !json[QString("usageLocation")].isNull() && m_usage_location_isValid;

    m_user_principal_name_isValid = ::OpenAPI::fromJsonValue(user_principal_name, json[QString("userPrincipalName")]);
    m_user_principal_name_isSet = !json[QString("userPrincipalName")].isNull() && m_user_principal_name_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;

    m_about_me_isValid = ::OpenAPI::fromJsonValue(about_me, json[QString("aboutMe")]);
    m_about_me_isSet = !json[QString("aboutMe")].isNull() && m_about_me_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_drive_isValid = ::OpenAPI::fromJsonValue(drive, json[QString("drive")]);
    m_drive_isSet = !json[QString("drive")].isNull() && m_drive_isValid;

    m_drives_isValid = ::OpenAPI::fromJsonValue(drives, json[QString("drives")]);
    m_drives_isSet = !json[QString("drives")].isNull() && m_drives_isValid;
}

QString OAIUser_allOf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_allOf::asJsonObject() const {
    QJsonObject obj;
    if (m_account_enabled_isSet) {
        obj.insert(QString("accountEnabled"), ::OpenAPI::toJsonValue(account_enabled));
    }
    if (business_phones.size() > 0) {
        obj.insert(QString("businessPhones"), ::OpenAPI::toJsonValue(business_phones));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(city));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(company_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(country));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(created_date_time));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(department));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(display_name));
    }
    if (m_fax_number_isSet) {
        obj.insert(QString("faxNumber"), ::OpenAPI::toJsonValue(fax_number));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(given_name));
    }
    if (m_last_password_change_date_time_isSet) {
        obj.insert(QString("lastPasswordChangeDateTime"), ::OpenAPI::toJsonValue(last_password_change_date_time));
    }
    if (m_legal_age_group_classification_isSet) {
        obj.insert(QString("legalAgeGroupClassification"), ::OpenAPI::toJsonValue(legal_age_group_classification));
    }
    if (m_mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(mail));
    }
    if (m_mail_nickname_isSet) {
        obj.insert(QString("mailNickname"), ::OpenAPI::toJsonValue(mail_nickname));
    }
    if (m_mobile_phone_isSet) {
        obj.insert(QString("mobilePhone"), ::OpenAPI::toJsonValue(mobile_phone));
    }
    if (m_office_location_isSet) {
        obj.insert(QString("officeLocation"), ::OpenAPI::toJsonValue(office_location));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(postal_code));
    }
    if (m_preferred_language_isSet) {
        obj.insert(QString("preferredLanguage"), ::OpenAPI::toJsonValue(preferred_language));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(state));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("streetAddress"), ::OpenAPI::toJsonValue(street_address));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(surname));
    }
    if (m_usage_location_isSet) {
        obj.insert(QString("usageLocation"), ::OpenAPI::toJsonValue(usage_location));
    }
    if (m_user_principal_name_isSet) {
        obj.insert(QString("userPrincipalName"), ::OpenAPI::toJsonValue(user_principal_name));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(user_type));
    }
    if (m_about_me_isSet) {
        obj.insert(QString("aboutMe"), ::OpenAPI::toJsonValue(about_me));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(birthday));
    }
    if (drive.isSet()) {
        obj.insert(QString("drive"), ::OpenAPI::toJsonValue(drive));
    }
    if (drives.size() > 0) {
        obj.insert(QString("drives"), ::OpenAPI::toJsonValue(drives));
    }
    return obj;
}

bool OAIUser_allOf::isAccountEnabled() const {
    return account_enabled;
}
void OAIUser_allOf::setAccountEnabled(const bool &account_enabled) {
    this->account_enabled = account_enabled;
    this->m_account_enabled_isSet = true;
}

bool OAIUser_allOf::is_account_enabled_Set() const{
    return m_account_enabled_isSet;
}

bool OAIUser_allOf::is_account_enabled_Valid() const{
    return m_account_enabled_isValid;
}

QList<QString> OAIUser_allOf::getBusinessPhones() const {
    return business_phones;
}
void OAIUser_allOf::setBusinessPhones(const QList<QString> &business_phones) {
    this->business_phones = business_phones;
    this->m_business_phones_isSet = true;
}

bool OAIUser_allOf::is_business_phones_Set() const{
    return m_business_phones_isSet;
}

bool OAIUser_allOf::is_business_phones_Valid() const{
    return m_business_phones_isValid;
}

QString OAIUser_allOf::getCity() const {
    return city;
}
void OAIUser_allOf::setCity(const QString &city) {
    this->city = city;
    this->m_city_isSet = true;
}

bool OAIUser_allOf::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUser_allOf::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUser_allOf::getCompanyName() const {
    return company_name;
}
void OAIUser_allOf::setCompanyName(const QString &company_name) {
    this->company_name = company_name;
    this->m_company_name_isSet = true;
}

bool OAIUser_allOf::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIUser_allOf::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIUser_allOf::getCountry() const {
    return country;
}
void OAIUser_allOf::setCountry(const QString &country) {
    this->country = country;
    this->m_country_isSet = true;
}

bool OAIUser_allOf::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUser_allOf::is_country_Valid() const{
    return m_country_isValid;
}

QDateTime OAIUser_allOf::getCreatedDateTime() const {
    return created_date_time;
}
void OAIUser_allOf::setCreatedDateTime(const QDateTime &created_date_time) {
    this->created_date_time = created_date_time;
    this->m_created_date_time_isSet = true;
}

bool OAIUser_allOf::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIUser_allOf::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIUser_allOf::getDepartment() const {
    return department;
}
void OAIUser_allOf::setDepartment(const QString &department) {
    this->department = department;
    this->m_department_isSet = true;
}

bool OAIUser_allOf::is_department_Set() const{
    return m_department_isSet;
}

bool OAIUser_allOf::is_department_Valid() const{
    return m_department_isValid;
}

QString OAIUser_allOf::getDisplayName() const {
    return display_name;
}
void OAIUser_allOf::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

bool OAIUser_allOf::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser_allOf::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser_allOf::getFaxNumber() const {
    return fax_number;
}
void OAIUser_allOf::setFaxNumber(const QString &fax_number) {
    this->fax_number = fax_number;
    this->m_fax_number_isSet = true;
}

bool OAIUser_allOf::is_fax_number_Set() const{
    return m_fax_number_isSet;
}

bool OAIUser_allOf::is_fax_number_Valid() const{
    return m_fax_number_isValid;
}

QString OAIUser_allOf::getGivenName() const {
    return given_name;
}
void OAIUser_allOf::setGivenName(const QString &given_name) {
    this->given_name = given_name;
    this->m_given_name_isSet = true;
}

bool OAIUser_allOf::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIUser_allOf::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QDateTime OAIUser_allOf::getLastPasswordChangeDateTime() const {
    return last_password_change_date_time;
}
void OAIUser_allOf::setLastPasswordChangeDateTime(const QDateTime &last_password_change_date_time) {
    this->last_password_change_date_time = last_password_change_date_time;
    this->m_last_password_change_date_time_isSet = true;
}

bool OAIUser_allOf::is_last_password_change_date_time_Set() const{
    return m_last_password_change_date_time_isSet;
}

bool OAIUser_allOf::is_last_password_change_date_time_Valid() const{
    return m_last_password_change_date_time_isValid;
}

QString OAIUser_allOf::getLegalAgeGroupClassification() const {
    return legal_age_group_classification;
}
void OAIUser_allOf::setLegalAgeGroupClassification(const QString &legal_age_group_classification) {
    this->legal_age_group_classification = legal_age_group_classification;
    this->m_legal_age_group_classification_isSet = true;
}

bool OAIUser_allOf::is_legal_age_group_classification_Set() const{
    return m_legal_age_group_classification_isSet;
}

bool OAIUser_allOf::is_legal_age_group_classification_Valid() const{
    return m_legal_age_group_classification_isValid;
}

QString OAIUser_allOf::getMail() const {
    return mail;
}
void OAIUser_allOf::setMail(const QString &mail) {
    this->mail = mail;
    this->m_mail_isSet = true;
}

bool OAIUser_allOf::is_mail_Set() const{
    return m_mail_isSet;
}

bool OAIUser_allOf::is_mail_Valid() const{
    return m_mail_isValid;
}

QString OAIUser_allOf::getMailNickname() const {
    return mail_nickname;
}
void OAIUser_allOf::setMailNickname(const QString &mail_nickname) {
    this->mail_nickname = mail_nickname;
    this->m_mail_nickname_isSet = true;
}

bool OAIUser_allOf::is_mail_nickname_Set() const{
    return m_mail_nickname_isSet;
}

bool OAIUser_allOf::is_mail_nickname_Valid() const{
    return m_mail_nickname_isValid;
}

QString OAIUser_allOf::getMobilePhone() const {
    return mobile_phone;
}
void OAIUser_allOf::setMobilePhone(const QString &mobile_phone) {
    this->mobile_phone = mobile_phone;
    this->m_mobile_phone_isSet = true;
}

bool OAIUser_allOf::is_mobile_phone_Set() const{
    return m_mobile_phone_isSet;
}

bool OAIUser_allOf::is_mobile_phone_Valid() const{
    return m_mobile_phone_isValid;
}

QString OAIUser_allOf::getOfficeLocation() const {
    return office_location;
}
void OAIUser_allOf::setOfficeLocation(const QString &office_location) {
    this->office_location = office_location;
    this->m_office_location_isSet = true;
}

bool OAIUser_allOf::is_office_location_Set() const{
    return m_office_location_isSet;
}

bool OAIUser_allOf::is_office_location_Valid() const{
    return m_office_location_isValid;
}

QString OAIUser_allOf::getPostalCode() const {
    return postal_code;
}
void OAIUser_allOf::setPostalCode(const QString &postal_code) {
    this->postal_code = postal_code;
    this->m_postal_code_isSet = true;
}

bool OAIUser_allOf::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIUser_allOf::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIUser_allOf::getPreferredLanguage() const {
    return preferred_language;
}
void OAIUser_allOf::setPreferredLanguage(const QString &preferred_language) {
    this->preferred_language = preferred_language;
    this->m_preferred_language_isSet = true;
}

bool OAIUser_allOf::is_preferred_language_Set() const{
    return m_preferred_language_isSet;
}

bool OAIUser_allOf::is_preferred_language_Valid() const{
    return m_preferred_language_isValid;
}

QString OAIUser_allOf::getState() const {
    return state;
}
void OAIUser_allOf::setState(const QString &state) {
    this->state = state;
    this->m_state_isSet = true;
}

bool OAIUser_allOf::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUser_allOf::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUser_allOf::getStreetAddress() const {
    return street_address;
}
void OAIUser_allOf::setStreetAddress(const QString &street_address) {
    this->street_address = street_address;
    this->m_street_address_isSet = true;
}

bool OAIUser_allOf::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIUser_allOf::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAIUser_allOf::getSurname() const {
    return surname;
}
void OAIUser_allOf::setSurname(const QString &surname) {
    this->surname = surname;
    this->m_surname_isSet = true;
}

bool OAIUser_allOf::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIUser_allOf::is_surname_Valid() const{
    return m_surname_isValid;
}

QString OAIUser_allOf::getUsageLocation() const {
    return usage_location;
}
void OAIUser_allOf::setUsageLocation(const QString &usage_location) {
    this->usage_location = usage_location;
    this->m_usage_location_isSet = true;
}

bool OAIUser_allOf::is_usage_location_Set() const{
    return m_usage_location_isSet;
}

bool OAIUser_allOf::is_usage_location_Valid() const{
    return m_usage_location_isValid;
}

QString OAIUser_allOf::getUserPrincipalName() const {
    return user_principal_name;
}
void OAIUser_allOf::setUserPrincipalName(const QString &user_principal_name) {
    this->user_principal_name = user_principal_name;
    this->m_user_principal_name_isSet = true;
}

bool OAIUser_allOf::is_user_principal_name_Set() const{
    return m_user_principal_name_isSet;
}

bool OAIUser_allOf::is_user_principal_name_Valid() const{
    return m_user_principal_name_isValid;
}

QString OAIUser_allOf::getUserType() const {
    return user_type;
}
void OAIUser_allOf::setUserType(const QString &user_type) {
    this->user_type = user_type;
    this->m_user_type_isSet = true;
}

bool OAIUser_allOf::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUser_allOf::is_user_type_Valid() const{
    return m_user_type_isValid;
}

QString OAIUser_allOf::getAboutMe() const {
    return about_me;
}
void OAIUser_allOf::setAboutMe(const QString &about_me) {
    this->about_me = about_me;
    this->m_about_me_isSet = true;
}

bool OAIUser_allOf::is_about_me_Set() const{
    return m_about_me_isSet;
}

bool OAIUser_allOf::is_about_me_Valid() const{
    return m_about_me_isValid;
}

QDateTime OAIUser_allOf::getBirthday() const {
    return birthday;
}
void OAIUser_allOf::setBirthday(const QDateTime &birthday) {
    this->birthday = birthday;
    this->m_birthday_isSet = true;
}

bool OAIUser_allOf::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIUser_allOf::is_birthday_Valid() const{
    return m_birthday_isValid;
}

OAIDrive OAIUser_allOf::getDrive() const {
    return drive;
}
void OAIUser_allOf::setDrive(const OAIDrive &drive) {
    this->drive = drive;
    this->m_drive_isSet = true;
}

bool OAIUser_allOf::is_drive_Set() const{
    return m_drive_isSet;
}

bool OAIUser_allOf::is_drive_Valid() const{
    return m_drive_isValid;
}

QList<OAIDrive> OAIUser_allOf::getDrives() const {
    return drives;
}
void OAIUser_allOf::setDrives(const QList<OAIDrive> &drives) {
    this->drives = drives;
    this->m_drives_isSet = true;
}

bool OAIUser_allOf::is_drives_Set() const{
    return m_drives_isSet;
}

bool OAIUser_allOf::is_drives_Valid() const{
    return m_drives_isValid;
}

bool OAIUser_allOf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (business_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_password_change_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_age_group_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_about_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (drives.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_allOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
