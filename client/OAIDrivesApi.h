/**
 * Open Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDrivesApi_H
#define OAI_OAIDrivesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDrive.h"
#include "OAIOdata_error.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDrivesApi : public QObject {
    Q_OBJECT

public:
    OAIDrivesApi(const int timeOut = 0);
    ~OAIDrivesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_drive OAIDrive [required]
    */
    void drives_CreateDrive(const OAIDrive &oai_drive);

    /**
    * @param[in]  drive_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    void drives_DeleteDrive(const QString &drive_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  drive_id QString [required]
    * @param[in]  select QSet<QString> [optional]
    * @param[in]  expand QSet<QString> [optional]
    */
    void drives_GetDrive(const QString &drive_id, const ::OpenAPI::OptionalParam<QSet<QString>> &select = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expand = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  drive_id QString [required]
    * @param[in]  oai_drive OAIDrive [required]
    */
    void drives_UpdateDrive(const QString &drive_id, const OAIDrive &oai_drive);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void drives_CreateDriveCallback(OAIHttpRequestWorker *worker);
    void drives_DeleteDriveCallback(OAIHttpRequestWorker *worker);
    void drives_GetDriveCallback(OAIHttpRequestWorker *worker);
    void drives_UpdateDriveCallback(OAIHttpRequestWorker *worker);

signals:

    void drives_CreateDriveSignal();
    void drives_DeleteDriveSignal();
    void drives_GetDriveSignal(OAIDrive summary);
    void drives_UpdateDriveSignal();

    void drives_CreateDriveSignalFull(OAIHttpRequestWorker *worker);
    void drives_DeleteDriveSignalFull(OAIHttpRequestWorker *worker);
    void drives_GetDriveSignalFull(OAIHttpRequestWorker *worker, OAIDrive summary);
    void drives_UpdateDriveSignalFull(OAIHttpRequestWorker *worker);

    void drives_CreateDriveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void drives_DeleteDriveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void drives_GetDriveSignalE(OAIDrive summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drives_UpdateDriveSignalE(QNetworkReply::NetworkError error_type, QString error_str);

    void drives_CreateDriveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drives_DeleteDriveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drives_GetDriveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drives_UpdateDriveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
